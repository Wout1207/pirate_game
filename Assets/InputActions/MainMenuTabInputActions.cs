//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActions/MainMenuTabInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainMenuTabInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainMenuTabInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainMenuTabInputActions"",
    ""maps"": [
        {
            ""name"": ""MainMenuTabs"",
            ""id"": ""03e07785-b3a3-4a2b-af86-98af4009bd82"",
            ""actions"": [
                {
                    ""name"": ""PreviousTab"",
                    ""type"": ""Button"",
                    ""id"": ""db5b531a-a4fe-4476-8ffa-c74247cdc197"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextTab"",
                    ""type"": ""Button"",
                    ""id"": ""f0ad21c4-aead-470c-b08f-6cefb8e65a6b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73414c68-603e-4983-8650-e2633a11c050"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9698392c-9ce6-42c7-a437-99bf66a86044"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5013444-9bfa-47c4-8e40-65abe1c073e7"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""179edf76-3a0d-404c-9678-a6c90b4c56d5"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainMenuTabs
        m_MainMenuTabs = asset.FindActionMap("MainMenuTabs", throwIfNotFound: true);
        m_MainMenuTabs_PreviousTab = m_MainMenuTabs.FindAction("PreviousTab", throwIfNotFound: true);
        m_MainMenuTabs_NextTab = m_MainMenuTabs.FindAction("NextTab", throwIfNotFound: true);
    }

    ~@MainMenuTabInputActions()
    {
        UnityEngine.Debug.Assert(!m_MainMenuTabs.enabled, "This will cause a leak and performance issues, MainMenuTabInputActions.MainMenuTabs.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMenuTabs
    private readonly InputActionMap m_MainMenuTabs;
    private List<IMainMenuTabsActions> m_MainMenuTabsActionsCallbackInterfaces = new List<IMainMenuTabsActions>();
    private readonly InputAction m_MainMenuTabs_PreviousTab;
    private readonly InputAction m_MainMenuTabs_NextTab;
    public struct MainMenuTabsActions
    {
        private @MainMenuTabInputActions m_Wrapper;
        public MainMenuTabsActions(@MainMenuTabInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PreviousTab => m_Wrapper.m_MainMenuTabs_PreviousTab;
        public InputAction @NextTab => m_Wrapper.m_MainMenuTabs_NextTab;
        public InputActionMap Get() { return m_Wrapper.m_MainMenuTabs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuTabsActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuTabsActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuTabsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuTabsActionsCallbackInterfaces.Add(instance);
            @PreviousTab.started += instance.OnPreviousTab;
            @PreviousTab.performed += instance.OnPreviousTab;
            @PreviousTab.canceled += instance.OnPreviousTab;
            @NextTab.started += instance.OnNextTab;
            @NextTab.performed += instance.OnNextTab;
            @NextTab.canceled += instance.OnNextTab;
        }

        private void UnregisterCallbacks(IMainMenuTabsActions instance)
        {
            @PreviousTab.started -= instance.OnPreviousTab;
            @PreviousTab.performed -= instance.OnPreviousTab;
            @PreviousTab.canceled -= instance.OnPreviousTab;
            @NextTab.started -= instance.OnNextTab;
            @NextTab.performed -= instance.OnNextTab;
            @NextTab.canceled -= instance.OnNextTab;
        }

        public void RemoveCallbacks(IMainMenuTabsActions instance)
        {
            if (m_Wrapper.m_MainMenuTabsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuTabsActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuTabsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuTabsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuTabsActions @MainMenuTabs => new MainMenuTabsActions(this);
    public interface IMainMenuTabsActions
    {
        void OnPreviousTab(InputAction.CallbackContext context);
        void OnNextTab(InputAction.CallbackContext context);
    }
}
